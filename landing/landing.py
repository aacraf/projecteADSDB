# -*- coding: utf-8 -*-
"""landing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10dgCUQ3d2e2JPaEtfwqL1mL5NQtpdKgE
"""

import shutil
from os import path
from datetime import datetime
import glob
import os
import time
import calendar
import json
import pandas as pd
import numpy as np

import matplotlib as plt

# COMPONENTS

# Wrapper

"""
- Add metadata to wrapper files
- Work with relative paths
- Add documentation
"""


dirname = os.path.dirname(__file__)


class Wrapper:
    '''Component that reads and understand data from the temporal zone and write it to the persistent zone'''

    # load or create a wrapper instance
    def __init__(self):
        try:
            with open(os.path.join(dirname, 'wrapper.json'),  encoding='utf-8') as wrapper:
                self.wrapper = json.load(wrapper)
        except:
            self.wrapper = dict()

    # get wrapper object
    def getWrapper(self):
        return self.wrapper

    # list all datasources
    def getDataSources(self):
        print(list(self.wrapper.keys()))

    def addNewDatasource(self, path):
        # arxiu csv
        filename = os.path.split(path)[1]
        filename_wo_extension = filename.split('.')[0]
        if filename_wo_extension not in os.listdir(os.path.join(dirname, 'temporal')):
            # create datasoure directory
            os.mkdir(f'{os.path.join(dirname,"temporal")}/{filename_wo_extension}')
        # copy file to datasource
        shutil.copy(path, f'{os.path.join(dirname,"temporal")}/{filename_wo_extension}/{filename}')

    # Read datasources from a folder (e.g: temporal)
    def readFolder(self, folder_path):
        
        if path.exists(os.path.join(dirname, 'persistent')) == False:
                os.mkdir(os.path.join(dirname, 'persistent'))

        for datasource in os.listdir(folder_path):
            file_list = os.listdir(folder_path+"/"+datasource)
            value = []
            if len(file_list):
                for filename in file_list:
                    # Getting the current date and time
                    current_GMT = time.gmtime()
                    # getting the timestamp
                    time_stamp = calendar.timegm(current_GMT)
                    if "Metadata" not in filename:
                        file = dict()
                        file["timestamp"] = str(time_stamp)
                        file["filename"] = filename
                        file["temporal_path"] = folder_path+"/"+datasource
                        file["persistent_path"] = ''
                        value.append(file)

                        # TODO: obtain file with that contains the Metadata substring
                        # metadata_file = [metadata for metadata in file_list if "Metadata" in metadata]
                        # print(metadata_file)
                        # if len(metadata_file):
                        #   value["metadata"] =  pd.read_csv(temporal_folder_path+"/"+datasource+"/"+metadata_file[0], sep=",")
                if datasource not in self.wrapper.keys():
                    self.wrapper[datasource] = value
                else:
                    self.wrapper[datasource].extend(value)

    # get data from wrapper and put it in the persistent folder

    def moveToPersistentFolder(self, persistentFolderPath):
        for key, datasource in self.wrapper.items():
            if path.exists(f'{persistentFolderPath}/{key}') == False:
                os.mkdir(f'{persistentFolderPath}/{key}')

            # file is timestamp+datasource_name
            for file in datasource:
                shutil.copy(file["temporal_path"]+"/"+file["filename"],
                            f'{persistentFolderPath}/{key}/{key+"$"+file["timestamp"]}.csv')
                file["persistent_path"] = f'{persistentFolderPath}/{key}/{key+"$"+file["timestamp"]}.csv'
                # pd.read_json(file["data"]).to_csv(f'{persistentFolderPath}/{key}/{key+"_"+file["timestamp"]}.csv')

    def cleanDataSourcesContent(self, folder_path):
        for ds in list(self.wrapper.keys()):
            files = glob.glob(f'{folder_path}/{ds}/*')
            for f in files:
                os.remove(f)

    # print datasources with the number of elements
    def summary(self):
        for k, v in self.wrapper.items():
            print("\n\n\n===========================")
            print(f'{k} - {len(v)} files')
            print("===========================")
            for file in v:
                print(f'timestamp: {file["timestamp"]}')
                print(f'filename: {file["filename"]}')
                print(f'temporal path: {file["temporal_path"]}')

                print(f'persistent path: {file["persistent_path"]}')
                print("---------------------------")
    # save wrapper as JSON file

    def save(self):
        with open(os.path.join(dirname, 'wrapper.json'), 'w') as fp:
            json.dump(self.wrapper, fp)

    # clean all content of the wrapper
    def clean(self):
        self.wrapper = dict()

    def delete(self):
        # remove wrapper
        os.remove(os.path.join(dirname, 'wrapper.json'))


"""## FUNCTIONS

We create or load a Wrapper component
"""

#test = Wrapper()

"""We list the DataSources (should be empty)"""

# test.getDataSources()

"""We list the temporary files in the datasources (should be empty)"""

# test.summary()

"""We read the temporal folder for the first time including all the datasources and its contents"""

# test.readFolder('./temporal')

"""We read data from.

We print the data sources (should be three)
"""

# test.getDataSources()

"""we print the content of each data source"""

# test.summary()

"""test.

We save the wrapper
"""

# test.save()

#test.cleanDataSourcesContent(os.path.join(dirname, 'temporal'))

"""**MOVE TO PERSISTENT ZONE**

This operation performs the data transformation between the temporal and persistent zone
"""

#test.moveToPersistentFolder(os.path.join(dirname, 'persistent'))

"""**DELETE WRAPPER**"""

# test.delete()

"""## EXECUTION OF THE ZONE"""


def executeLanding():

    # create or load the wrapper component
    wrapper = Wrapper()

    #  Read temporal Folder
    wrapper.readFolder(os.path.join(dirname, 'temporal'))

    #  Move to persistent
    wrapper.moveToPersistentFolder(os.path.join(dirname, 'persistent'))

    #  Save updated wrapper
    wrapper.save()
