# -*- coding: utf-8 -*-
"""analytic_sandbox.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15MoXH33D3zzfN9fpuKNw_Dg8SQQjRmBk
"""
import os
import duckdb
import pandas as pd

"""# Analytical Sandbox


The purpose of this notebook is to specify the different analytical topics inside the general Analytical Backbone (Influential indicators in the Oympics)

In this case we are only creating one analytical sandbox since we are performing a unique analysis. However, in this notebook we are assuming that there could be more analytical subcases and that each one should have it's own space.

We store each analytical subcase as a duckdb file in the sandboxes folder. In this case we create a the relashionship of indicatos and the olympics results and we save it as a unique db file.

## Load Data
"""



"""# OPERATIONS: Execute Notebook"""

def execute_analytical_sandbox():
  # connect to explotation zone
  dirname = os.path.dirname(__file__)
  con = duckdb.connect(database=os.path.join(dirname, "../../../../DataManagmentBackbone/explotation/storage/explotation.duckdb"), read_only=False)

  Olympics_df = con.execute('SELECT * FROM Olympics_Data').df() # olympics results
  Indicators_df = con.execute('SELECT * FROM Country_Data').df() # indicators

  # tranform olympic df
  Olympics_df_transformed = Olympics_df.groupby(['year','ioc_code']).size().reset_index(name='medals').sort_values(['year', 'medals'],ascending=[True,False]) # aggregate by year and code country and  sum medals

  # join
  Olympic_Indicators_df = pd.merge(Olympics_df_transformed, Indicators_df,  how='inner', left_on=['year','ioc_code'], right_on = ['year','iso'])

  # save analytical case
  con2 = duckdb.connect(database=os.path.join(dirname,'../storage/sandboxes/olympics_indicators.duckdb'), read_only=False)
  con2.execute(f'DROP TABLE IF EXISTS Olympic_Indicators;')
  con2.execute(f'CREATE TABLE IF NOT EXISTS Olympic_Indicators AS SELECT * FROM Olympic_Indicators_df;')

  # close c