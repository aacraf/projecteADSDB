# -*- coding: utf-8 -*-
"""missing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14nEEFC_DJmVyeCFSVkQ0e-kkz2nHSHqr
"""

#!pip install duckdb"""  """

import duckdb
import pandas as pd
import os

import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer

def missing_values(df):
  # replace None for Nan
  df = df.replace({None: np.nan})

  #select categorical and numerical features
  numerical_features = df.select_dtypes(include=np.number)
  categorical_features = df.select_dtypes(include=['object'])

  # Treat numearical categories using median 
  numeric_imputer = SimpleImputer(strategy='median', missing_values=np.nan)
  imputed_numerical_df = numeric_imputer.fit_transform(numerical_features)
  imputed_numerical_df = pd.DataFrame(imputed_numerical_df, columns=numerical_features.columns)

  # TReat categorical using mode
  categorical_imputer = SimpleImputer(strategy="most_frequent", missing_values=np.nan)
  imputed_categorical_df = categorical_imputer.fit_transform(categorical_features)
  imputed_categorical_df = pd.DataFrame(imputed_categorical_df, columns=categorical_features.columns)


  # combine results and apply same order an type as original dataframe
  imputed_df = pd.concat([imputed_numerical_df, imputed_categorical_df], axis=1)
  imputed_df = imputed_df[df.columns].astype(df.dtypes) #order

  return imputed_df


"""# EXECUTION OF THE PROCESS"""

def executeMissingData():
  
  dirname = os.path.dirname(__file__)
  con = duckdb.connect(database=os.path.join(dirname, "../trusted.duckdb"), read_only=False)

  tables = con.execute("SHOW TABLES").fetchall()
  tables = list([t for (t,) in tables])


  for ds in tables:
    # table as dataframe
    df = con.execute(f'SELECT * FROM {ds}').df()
    # apply function
    df = missing_values(df)
    # replace table with new imputed one
    con.execute(f'DROP TABLE IF EXISTS {ds};')
    con.execute(f'CREATE TABLE IF NOT EXISTS {ds} AS SELECT * FROM df;')

  con.close()