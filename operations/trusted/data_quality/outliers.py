# -*- coding: utf-8 -*-
"""outliers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FWnp1BZBsxgvHgbzytYKFvjYg3fmNUrF

### Read data
"""
import duckdb
import pandas as pd
import numpy as np
import os
#import matplotlib.pyplot as plt



"""# Outlier detection
## Visualization


"""

# import seaborn as sns
# from IPython import display
import time

# def outlierVisualization(df):
#   numdf = df.select_dtypes(include=np.number)
#   numdf.plot(
#     kind='box', 
#     subplots=True, 
#     sharey=False, 
#     figsize=(10, 6)
#   )

#   # increase spacing between subplots
#   plt.subplots_adjust(wspace=0.5) 
#   plt.show()


def outlierRemoving(df):
  numdf = df.select_dtypes(include=np.number)
  #print('before... ', df.size)
  for col in numdf:
    q = df[col].quantile(0.99)
    valid = numdf[col] < q
    df = df.loc[valid]
  #print('after... ', df.size)
  return df


"""# EXECUTION OF PROCESS"""

def execute_outliers():

  dirname = os.path.dirname(__file__)

  #connect to trusted database
  con = duckdb.connect(database=os.path.join(dirname, '../trusted.duckdb'), read_only=False)

  # OUTLIER VISUALIZATION
  l = con.execute("SHOW TABLES").fetchall()
  tables = list([t for (t,) in l])

  # OUTLIER REMOVAL
  for ds in tables:
    # apply function
    df = con.execute(f'SELECT * FROM {ds};').df()
    df = outlierRemoving(df)
    # replace table with new imputed one
    con.execute(f'DROP TABLE IF EXISTS {ds};')
    con.execute(f'CREATE TABLE IF NOT EXISTS {ds} AS SELECT * FROM df;')

  # close connection
  con.close()